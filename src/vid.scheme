; NB: output codec requires dimensions to be multiples of 8
(define (map fn lst) (if (null? lst) '() (cons (fn (first lst)) (map fn (rest lst)))))
(define (sq x) (* x x))
(define (identity x) x)
(map sq '(1 2 3 4))

(define width 1920)
(define height 1080)
(define (secs-to-frames s) (* s 30))

(define (standard-slide p) (vs-progress-bar "#ffff00" "#000000" 8 -8
					    (vs-matte width height "#000000" 0 p)))


(define (add-transitions t ps) (if (null? (rest ps)) (cons (first ps) '()) (cons (first ps) (cons t (add-transitions t (rest ps))))))

(define foo (list (standard-slide (vs-overlay 0 (vs-solid width height "#000000" 999999) (list (list 0 0 1 (vs-images "/home/ebolson/pkvid/src/movie"))
											       (list 500 500 1 (vs-images "/home/ebolson/pkvid/src/movie"))
											       (list 1000 000 0 (vs-solid width height "#ffff00" 999999)))))

		  (standard-slide (vs-images "/home/ebolson/pkvid/src/movie"))
		  (standard-slide (vs-still "original-1.ppm" (secs-to-frames 3)))
		  (standard-slide (vs-still "original-2.ppm" (secs-to-frames 3)))
		  (standard-slide (vs-still "original-3.ppm" (secs-to-frames 3)))
		  (standard-slide (vs-still "original-4.ppm" (secs-to-frames 3)))))


(define myslides (add-transitions (vs-transition-crossfade (secs-to-frames .5)) foo))

(vs-output
 (vs-concat
  (vs-progress-bar "#ff0000" "#000000" 8 0
		   (vs-concat-list myslides))
  (vs-solid width height "#000000" (secs-to-frames 1))))
